unit TestuPaciente;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Generics.Collections, uPaciente;

type
  // Test methods for class TListaPaciente

  TestTListaPaciente = class(TTestCase)
  strict private
    FListaPaciente: TListaPaciente;

    procedure TesteProc;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestAdicionar;
    procedure TestProximo;
  end;

implementation

uses
  System.SysUtils;

procedure TestTListaPaciente.SetUp;
begin
  FListaPaciente := TListaPaciente.Create;
end;

procedure TestTListaPaciente.TearDown;
begin
  FListaPaciente.Free;
  FListaPaciente := nil;
end;

procedure TestTListaPaciente.TestAdicionar;
var
  ReturnValue: Boolean;
  aPaciente: TPaciente;
begin
  aPaciente := TPaciente.Create('111', 'Armando', 'Oftalmologista');

  ReturnValue := FListaPaciente.Adicionar(aPaciente);

  CheckTrue(ReturnValue, 'Erro ao adicionar na lista');
end;

procedure TestTListaPaciente.TesteProc;
begin
  FListaPaciente.Proximo;
end;

procedure TestTListaPaciente.TestProximo;
var
  aPaciente: TPaciente;
  I: Integer;
begin
  aPaciente := TPaciente.Create('111', 'Armando', 'Oftalmologista');
  FListaPaciente.Adicionar(aPaciente);

  CheckException(TesteProc, Exception, 'Erro ao chamar somente um paciente');

  aPaciente := TPaciente.Create('222', 'Maria', 'Geral');
  FListaPaciente.Adicionar(aPaciente);

  //Primeiro Registro
  aPaciente := FListaPaciente.Proximo;
  CheckEquals('111', aPaciente.CPF, 'CPF errado');
  CheckEquals('Armando', aPaciente.Nome, 'Nome errado');
  CheckEquals('Oftalmologista', aPaciente.Especialidade, 'Especialidade errada');

  //Segundo Registro
  aPaciente := FListaPaciente.Proximo;

  CheckEquals('111', FListaPaciente.PacienteAnterior.CPF, 'CPF Anterior errado');
  CheckEquals('Armando', FListaPaciente.PacienteAnterior.Nome, 'Nome Anterior errado');
  CheckEquals('Oftalmologista', FListaPaciente.PacienteAnterior.Especialidade, 'Especialidade Anterior errada');

  CheckEquals('222', aPaciente.CPF, 'CPF errado');
  CheckEquals('Maria', aPaciente.Nome, 'Nome errado');
  CheckEquals('Geral', aPaciente.Especialidade, 'Especialidade errada');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTListaPaciente.Suite);
end.

